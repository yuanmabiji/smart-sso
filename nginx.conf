
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       9000;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # nginx反向代理demo1：配置nginx反向代理tomcat服务器
    upstream sso_server{
        server server.sso.com:8080;
    }
    server {
        listen       9001;
        server_name  localhost;

        location /server/ { # ~ /server好像无差别
            proxy_pass http://sso_server;
            proxy_set_header Host $host;    #不配置这个，会报Nginx 400 Bad Request错误
        }

    }

    # nginx反向代理demo2：配置nginx反向代理tomcat服务器实现负载均衡
    upstream sso_server_cluster{
        server server.sso.com:8080 weight=1;
        server server.sso.com:8079 weight=2;
    }
    server {
        listen       9002;
        server_name  localhost;

        location /server/ {
            proxy_pass http://sso_server_cluster;
            proxy_set_header Host $host;    #不配置这个，会报Nginx 400 Bad Request错误
        }

    }

    # nginx反向代理demo3：配置nginx反向代理tomcat服务器实现实现根据context-path路径分发到不同的服务器，同时达到隐藏跨域的效果
    upstream sso_server_{
        server server.sso.com:8080;
    }

    upstream sso_client1_{
        server client1.sso.com:8081;
    }

    upstream sso_client2_{
        server client2.sso.com:8082;
    }

    server {
        listen       9003;
        server_name  localhost;

        location /server/ {
            proxy_pass http://sso_server_;
            proxy_set_header Host $host;    #不配置这个，会报Nginx 400 Bad Request错误
        }

        location /client1/ {
            proxy_pass http://sso_client1_;
            proxy_set_header Host $host;    #不配置这个，会报Nginx 400 Bad Request错误
        }

        location /client2/ {
            proxy_pass http://sso_client2_;
            proxy_set_header Host $host;    #不配置这个，会报Nginx 400 Bad Request错误
        }
    }

    # nginx反向代理demo4：配置nginx反向代理tomcat服务器实现实现根据context-path路径分发到不同的服务器，同时达到隐藏跨域的效果(域名访问形式)
    server {
        listen       9004;
        server_name  portal.sso.com; # 将loalhost改为域名

        location /server/ {
            proxy_pass http://sso_server_;
            proxy_set_header Host $host:$proxy_port;    #不配置这个，会报Nginx 400 Bad Request错误
        }

        location /client1/ {
            proxy_pass http://sso_client1_;
            proxy_set_header Host $host:$proxy_port;    #不配置这个，会报Nginx 400 Bad Request错误
        }

        location /client2/ {
            proxy_pass http://sso_client2_;
            proxy_set_header Host $host:$proxy_port;    #不配置这个，会报Nginx 400 Bad Request错误
        }
    }

    # nginx正向代理demo1：配置nginx正向代理访问百度
    server {
        resolver 8.8.8.8;
        listen 9005;
        location / {
            proxy_pass https://www.baidu.com/;
        }
    }

    # nginx正向代理demo2：配置nginx正向代理访问sso.server
    server {
        resolver 8.8.8.8;
        listen 9006;
        location /server/ {
            proxy_pass http://sso_server_;
            proxy_set_header Host $host:$proxy_port;
        }
    }



    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
